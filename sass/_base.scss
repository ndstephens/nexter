// COLOR VARIABLES
$color-primary: #c69963;
$color-primary-dark: #b28451;

$color-secondary: #101d2c;

$color-grey-light-1: #f9f7f6;
$color-grey-light-2: #aaa;

$color-grey-dark-1: #54483a;
$color-grey-dark-2: #6d5d4b;

// FONT VARIABLES
$font-primary: "Nunito", sans-serif;
$font-display: "Josefin Sans", sans-serif;

html {
  box-sizing: border-box;
  font-size: 62.5%; // 10px/16px
}

body {
  font-family: $font-primary;
  color: $color-grey-dark-2;
  font-weight: 300;
  line-height: 1.6;
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

.container {
  display: grid;
  /*//* the default for each row, if not explicitly given, is "auto".  "min-content" is pretty much the same as "auto".  the Story Section uses 40vw so that its height is always in relation (aspect ratio) to the screen width. */
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  /*//* want the center 8-col-grid to be fixed width while the screen width changes size.  the two side '1fr's will respond while the center 8 (holding the content of the '.features' and '.homes' sections) stays fixed.  having the '1fr' cols on the sides allow full-bleed sections to expand wider, and be be fully responsive with changing screen width. */
  // prettier-ignore
  grid-template-columns: 
    [sidebar-start] 
    8rem 
    [sidebar-end 
    full-start] 
    minmax(6rem, 1fr) 
    [center-start] 
    repeat(8, [col-start] minmax(min-content, 14rem) [col-end])
    [center-end] 
    minmax(6rem, 1fr) 
    [full-end];
}

/*//?----------  BUTTONS  ----------*/
.btn {
  background-color: $color-primary;
  color: #fff;
  border: none;
  border-radius: 0;
  font-family: $font-display;
  font-size: 1.5rem;
  text-transform: uppercase;
  padding: 1.8rem 3rem;
  cursor: pointer;
  transition: background-color 0.2s;

  &:hover {
    background-color: $color-primary-dark;
  }
}

/*//?----------  UTILITIES  ----------*/
/*//* don't always want to hard-code margin into certain CSS declarations since that margin may not be wanted in all instances of that class (such as with headings) */
/*//* this is primary only with reusable elements/classes, not usually those referenced with the BEM naming system, since those are very specific and therefore often can have specific margin properties */
.mb-sm {
  margin-bottom: 2rem;
}
.mb-md {
  margin-bottom: 3rem;
}
.mb-lg {
  margin-bottom: 4rem;
}
.mb-xlg {
  margin-bottom: 8rem;
}
